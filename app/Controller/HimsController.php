<?php/** * MyNewController * * A new controller example following CakePHP conventions. */ use Cake\ORM\TableRegistry;use Cake\Datasource\ConnectionManager;class HimsController extends AppController {    public $name = 'Hims';         public function beforeFilter() {    parent::beforeFilter(); // Make sure to call the parent beforeFilter    // Allow patient_details action without authentication       $this->Auth->allow('patient_details'); $this->Auth->allow('patient_details_ride');  $this->Auth->allow('patient_details_esic_only');    // Load the database connection with 'db_hope' and 'db_ayushman'    $this->loadDatabaseConnection('db_hope');    $this->loadDatabaseConnection('db_ayushman');}    public function index() {          }    //   public function patient_details() {//     $this->autoRender = false; // Disable view rendering//     $this->response->type('json'); // Set response type to JSON//     App::import('Vendor', 'DrmhopeDB');    //     // Create connections to all three databases//     $hopeDB = new DrmhopeDB('db_HopeHospital');//     $ayushmanDB = new DrmhopeDB('db_Ayushman');//     $dbhopeDB = new DrmhopeDB('db_hope');    //     // Models to be loaded//     $models = ['Patient', 'Person', 'User', 'TariffStandard', 'DischargeSummary'];    //     // Load models//     foreach ($models as $model) {//         $this->loadModel($model);//     }//     // Retrieve mobile number from request//     $mobile = $this->request->data('mobile');    //     if (empty($mobile)) {//         echo json_encode(['status' => 'error', 'message' => 'Mobile number required.']);//         return;//     }    //     $mobile = substr($mobile, -10); // Normalize mobile number to last 10 digits    //     try {//         // Initialize database connections//         $databases = [//             // $hopeDB,  // Hope Hospital DB//             $ayushmanDB,  // Ayushman Hospital DB//             $dbhopeDB  // Hope Group DB//         ];//         $patientData = [];//         // Loop through each database and fetch data//         foreach ($databases as $dbInstance) {//             // Make the connection to the current database//             $dbInstance->makeConnection($this->Patient);//             $dbInstance->makeConnection($this->Person);//             $dbInstance->makeConnection($this->User);//             $dbInstance->makeConnection($this->TariffStandard);//             $dbInstance->makeConnection($this->DischargeSummary);//             // Fetch patient details from the current database//             $results = $this->Patient->find('all', [//                 'fields' => [//                     'Patient.id',//                     'Patient.form_received_on',//                     'Patient.status',//                     'Patient.market_team',//                     'Patient.create_time',//                     'Person.admission_type',//                     'Person.first_name',//                     'Person.last_name',//                     'Person.mobile',//                     'Person.age',//                     'Person.sex',//                     'Person.blood_group',//                     'Person.allergies',//                     'Person.next_of_kin_name',//                     'Person.next_of_kin_mobile',//                     'Person.relationship_manager',//                     'Person.patient_uid',//                     'User.first_name as doctor_first_name',//                     'User.last_name as doctor_last_name',//                     'TariffStandard.name as tariff_name',//                     'DischargeSummary.final_diagnosis',//                     'Person.state', 'Person.city', 'Person.plot_no', 'Person.pin_code',//                     'Person.agent_id'//                 ],//                 'joins' => [//                     [//                         'table' => 'persons',//                         'alias' => 'Person',//                         'type' => 'INNER',//                         'conditions' => ['Patient.person_id = Person.id']//                     ],//                     [//                         'table' => 'users',//                         'alias' => 'User',//                         'type' => 'LEFT',//                         'conditions' => ['Patient.doctor_id = User.id']//                     ],//                     [//                         'table' => 'tariff_standards',//                         'alias' => 'TariffStandard',//                         'type' => 'LEFT',//                         'conditions' => ['Patient.tariff_standard_id = TariffStandard.id']//                     ],//                     [//                         'table' => 'discharge_summaries',//                         'alias' => 'DischargeSummary',//                         'type' => 'LEFT',//                         'conditions' => ['DischargeSummary.patient_id = Patient.id']//                     ]//                 ],//                 'conditions' => ['Person.mobile' => $mobile],//                 'order' => ['Patient.create_time' => 'DESC'], // Order by create_time descending//             ]);//             if (!empty($results)) {//                 foreach ($results as $result) {//                     $patientData[] = [//                         'Patient Name' => $result['Person']['first_name'] . ' ' . $result['Person']['last_name'],//                         'Patient UUID' => $result['Person']['patient_uid'],//                         'Admission Date' => $result['Patient']['form_received_on'],//                         'Next of Kin Name' => $result['Person']['next_of_kin_name'],//                         'Next of Kin Mobile' => $result['Person']['next_of_kin_mobile'],//                         'Allergy' => $result['Person']['allergies'],//                         'Patient Tariff' => $result['TariffStandard']['tariff_name'],//                         'Blood Group' => $result['Person']['blood_group'],//                         'Patient Status' => $result['Patient']['status'],//                         'Doctor' => $result['User']['doctor_first_name'] . ' ' . $result['User']['doctor_last_name'],//                         'Admission Type' => $result['Person']['admission_type'],//                         'Age/Sex' => $result['Person']['age'] . ' ' . $result['Person']['sex'],//                         'Diagnosis' => $result['DischargeSummary']['final_diagnosis'],//                         'Mobile No' => $result['Person']['mobile'],//                         'Address' => $result['Person']['state'] . ', ' . $result['Person']['city'] . ', ' . $result['Person']['plot_no'] . ', ' . $result['Person']['pin_code'],//                         'Agent Id' => $result['Person']['agent_id'],//                         'Driver' => $result['Person']['relationship_manager'],//                         'Date' => $result['Patient']['create_time'],//                         'Hospital' => $dbName // Adding database name for reference//                     ];//                 }//             }//         }//         // After collecting all patient data from the three databases, sort by admission date (descending)//         usort($patientData, function ($a, $b) {//             return strtotime($b['Admission Date']) - strtotime($a['Admission Date']);//         });//         // Return the most recent patient entry from all databases//         if (empty($patientData)) {//             echo json_encode(['status' => 'error', 'message' => 'No patients found for the provided mobile number.']);//         } else {//             // Store the most recent entry in $response and return it//             $response = [//                 'Personal Details' => $patientData[0] // Only return the latest record//             ];//             echo json_encode(['status' => 'success', 'data' => $response]);//         }//     } catch (Exception $e) {//         echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);//     }// }public function patient_details() {    $this->autoRender = false; // Disable view rendering    $this->response->type('json'); // Set response type to JSON    App::import('Vendor', 'DrmhopeDB');        // Create connections to all three databases with their names    $databases = [        'Hope Hospital' => new DrmhopeDB('db_HopeHospital'),        'Ayushman Hospital' => new DrmhopeDB('db_Ayushman'),        'Hope Group' => new DrmhopeDB('db_hope')    ];    // Load models    $models = ['Patient', 'Person', 'User', 'TariffStandard', 'DischargeSummary'];    foreach ($models as $model) {        $this->loadModel($model);    }    // Retrieve mobile number from request    $mobile = $this->request->data('mobile');    if (empty($mobile)) {        echo json_encode(['status' => 'error', 'message' => 'Mobile number required.']);        return;    }    $mobile = substr($mobile, -10); // Normalize mobile number to last 10 digits    try {        $patientData = [];        foreach ($databases as $dbName => $dbInstance) {            // Make connections for each model to the current database            $dbInstance->makeConnection($this->Patient);            $dbInstance->makeConnection($this->Person);            $dbInstance->makeConnection($this->User);            $dbInstance->makeConnection($this->TariffStandard);            $dbInstance->makeConnection($this->DischargeSummary);            // Fetch patient details from the current database            $results = $this->Patient->find('all', [                'fields' => [                    'Patient.id',                    'Patient.form_received_on',                    'Patient.status',                    'Patient.market_team',                    'Patient.create_time',                    'Person.admission_type',                    'Person.first_name',                    'Person.last_name',                    'Person.mobile',                    'Person.age',                    'Person.sex',                    'Person.blood_group',                    'Person.allergies',                    'Person.next_of_kin_name',                    'Person.next_of_kin_mobile',                    'Person.relationship_manager',                    'Person.patient_uid',                    'User.first_name as doctor_first_name',                    'User.last_name as doctor_last_name',                    'TariffStandard.name as tariff_name',                    'DischargeSummary.final_diagnosis',                    'Person.state', 'Person.city', 'Person.plot_no', 'Person.pin_code',                    'Person.agent_id'                ],                'joins' => [                    [                        'table' => 'persons',                        'alias' => 'Person',                        'type' => 'INNER',                        'conditions' => ['Patient.person_id = Person.id']                    ],                    [                        'table' => 'users',                        'alias' => 'User',                        'type' => 'LEFT',                        'conditions' => ['Patient.doctor_id = User.id']                    ],                    [                        'table' => 'tariff_standards',                        'alias' => 'TariffStandard',                        'type' => 'LEFT',                        'conditions' => ['Patient.tariff_standard_id = TariffStandard.id']                    ],                    [                        'table' => 'discharge_summaries',                        'alias' => 'DischargeSummary',                        'type' => 'LEFT',                        'conditions' => ['DischargeSummary.patient_id = Patient.id']                    ]                ],                'conditions' => ['Person.mobile' => $mobile],                'order' => ['Patient.create_time' => 'DESC']            ]);            if (!empty($results)) {                foreach ($results as $result) {                    $patientData[] = [                        'Patient Name' => $result['Person']['first_name'] . ' ' . $result['Person']['last_name'],                        'Patient UUID' => $result['Person']['patient_uid'],                        'Admission Date' => $result['Patient']['form_received_on'],                        'Next of Kin Name' => $result['Person']['next_of_kin_name'],                        'Next of Kin Mobile' => $result['Person']['next_of_kin_mobile'],                        'Allergy' => $result['Person']['allergies'],                        'Patient Tariff' => $result['TariffStandard']['tariff_name'],                        'Blood Group' => $result['Person']['blood_group'],                        'Patient Status' => $result['Patient']['status'],                        'Doctor' => $result['User']['doctor_first_name'] . ' ' . $result['User']['doctor_last_name'],                        'Admission Type' => $result['Person']['admission_type'],                        'Age/Sex' => $result['Person']['age'] . ' ' . $result['Person']['sex'],                        'Diagnosis' => $result['DischargeSummary']['final_diagnosis'],                        'Mobile No' => $result['Person']['mobile'],                        'Address' => $result['Person']['state'] . ', ' . $result['Person']['city'] . ', ' . $result['Person']['plot_no'] . ', ' . $result['Person']['pin_code'],                        'Agent Id' => $result['Person']['agent_id'],                        'Driver' => $result['Person']['relationship_manager'],                        'Date' => $result['Patient']['create_time'],                        'Hospital' => $dbName // Now correctly included                    ];                }            }        }        // Sort all records by admission date        usort($patientData, function ($a, $b) {            return strtotime($b['Admission Date']) - strtotime($a['Admission Date']);        });        if (empty($patientData)) {            echo json_encode(['status' => 'error', 'message' => 'No patients found for the provided mobile number.']);        } else {            echo json_encode([                'status' => 'success',                'data' => ['Personal Details' => $patientData[0]]            ]);        }    } catch (Exception $e) {        echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);    }}// esic patint  api created by Poojapublic function patient_details_esic_only() {    $this->autoRender = false;    $this->response->type('json');    App::import('Vendor', 'DrmhopeDB');    $dbInstance = new DrmhopeDB('db_HopeHospital');    $models = [        'Patient', 'Person', 'User', 'TariffStandard', 'DischargeSummary',        'LaboratoryTestOrder', 'LaboratoryResult', 'Laboratory', 'RadiologyTestOrder','RadiologyResult','PharmacySalesBill', 'PharmacySalesBillDetail', 'PharmacyItem','LaboratoryHl7Result', 'LaboratoryParameter','Note', 'OptAppointment', 'Surgery', 'Opt', 'DoctorProfile', 'Doctor', 'Department'    ];    foreach ($models as $model) {        $this->loadModel($model);        $dbInstance->makeConnection($this->{$model});    }    $mobile = $this->request->data('mobile');    if (empty($mobile)) {        echo json_encode(['status' => 'error', 'message' => 'Mobile number required.']);        return;    }    $mobile = substr($mobile, -10);    try {        $patientResult = $this->Patient->find('first', [            'fields' => [                'Patient.id',                'Patient.form_received_on',                'Patient.status',                'Patient.create_time',                'Person.admission_type',                'Person.first_name',                'Person.last_name',                'Person.mobile',                'Person.age',                'Person.sex',                'Person.blood_group',                'Person.allergies',                'Person.next_of_kin_name',                'Person.next_of_kin_mobile',                'Person.relationship_manager',                'Person.patient_uid',                'User.first_name as doctor_first_name',                'User.last_name as doctor_last_name',                'TariffStandard.name as tariff_name',                'DischargeSummary.final_diagnosis',                'Person.state', 'Person.city', 'Person.plot_no', 'Person.pin_code',                'Person.agent_id'            ],            'joins' => [                [                    'table' => 'persons',                    'alias' => 'Person',                    'type' => 'INNER',                    'conditions' => ['Patient.person_id = Person.id']                ],                [                    'table' => 'users',                    'alias' => 'User',                    'type' => 'LEFT',                    'conditions' => ['Patient.doctor_id = User.id']                ],                [                    'table' => 'tariff_standards',                    'alias' => 'TariffStandard',                    'type' => 'INNER',                    'conditions' => ['Patient.tariff_standard_id = TariffStandard.id']                ],                [                    'table' => 'discharge_summaries',                    'alias' => 'DischargeSummary',                    'type' => 'LEFT',                    'conditions' => ['DischargeSummary.patient_id = Patient.id']                ]            ],            'conditions' => [                'Person.mobile' => $mobile,                'TariffStandard.name' => 'ESIC'            ],            'order' => ['Patient.create_time' => 'DESC']        ]);        if (empty($patientResult)) {            echo json_encode(['status' => 'error', 'message' => 'No ESIC patients found with this mobile number.']);            return;        }        $patientId = $patientResult['Patient']['id'];        // ✅ Lab Tests        $labResults = $this->LaboratoryTestOrder->find('all', [            'fields' => [                'LaboratoryTestOrder.id',                'LaboratoryTestOrder.amount',                'Laboratory.id',                'Laboratory.name'            ],            'joins' => [                [                    'table' => 'laboratories',                    'alias' => 'Laboratory',                    'type' => 'LEFT',                    'conditions' => ['Laboratory.id = LaboratoryTestOrder.laboratory_id'] // Adjust this based on actual schema                ]            ],            'conditions' => [                'LaboratoryTestOrder.patient_id' => $patientId            ]        ]);        $labTests = [];        foreach ($labResults as $lab) {            $labTests[] = [                'Lab Test Order ID' => $lab['LaboratoryTestOrder']['id'],                'Lab Amount' => $lab['LaboratoryTestOrder']['amount'],                'Laboratory ID' => $lab['Laboratory']['id'],                'Laboratory Name' => $lab['Laboratory']['name']            ];        }           $hl7Results = $this->LaboratoryHl7Result->find('all', [    'fields' => [        'LaboratoryHl7Result.result',        'LaboratoryParameter.name'    ],    'joins' => [        [            'table' => 'laboratory_parameters',            'alias' => 'LaboratoryParameter',            'type' => 'LEFT',            'conditions' => ['LaboratoryHl7Result.laboratory_parameter_id = LaboratoryParameter.id']        ]    ],    'recursive' => -1]);$hl7Formatted = [];foreach ($hl7Results as $res) {    $hl7Formatted[] = [        'Test Name' => $res['LaboratoryParameter']['name'],        'Result' => $res['LaboratoryHl7Result']['result']    ];}        $radiologyResults = $this->RadiologyResult->find('all', [                'fields' => [                    'RadiologyTestOrder.testname',                    'RadiologyTestOrder.amount'                ],                'joins' => [                    [                        'table' => 'radiology_test_orders',                        'alias' => 'RadiologyTestOrder',                        'type' => 'LEFT',                        'conditions' => ['RadiologyResult.radiology_id = RadiologyTestOrder.id']                    ]                ],                'conditions' => [                    'RadiologyResult.patient_id' => $patientId                ]            ]);            $radiologyTests = [];            foreach ($radiologyResults as $rad) {                $radiologyTests[] = [                    'Test Name' => $rad['RadiologyTestOrder']['testname'],                    'Amount' => $rad['RadiologyTestOrder']['amount']                ];            }       // ✅ OT Notes (Surgery Notes, OT Appointments)        $otNotes = [];        // Get Surgery Notes from Notes table (with complete details)        $surgeryNotes = $this->Note->find('all', [            'fields' => [                'Note.id',                'Note.title',                'Note.note',                'Note.note_type',                'Note.surgery_note_type',                'Note.anaesthesia_note_type',                'Note.anaesthesia_note',                'Note.surgery',                'Note.implants',                'Note.event_note',                'Note.post_opt',                'Note.pre_opt',                'Note.investigation',                'Note.present_condition',                'Note.create_time',                'Surgery.name as surgery_name',                'Surgery.description as surgery_description'            ],            'joins' => [                [                    'table' => 'surgeries',                    'alias' => 'Surgery',                    'type' => 'LEFT',                    'conditions' => ['Note.surgery_id = Surgery.id']                ]            ],            'conditions' => [                'Note.patient_id' => $patientId,                'Note.surgery_id IS NOT NULL'            ],            'order' => ['Note.create_time' => 'DESC'],            'recursive' => -1        ]);        // Get OT Appointments using simple query without complex associations        $otAppointments = $this->OptAppointment->find('all', [            'fields' => [                'OptAppointment.*'            ],            'conditions' => ['OptAppointment.patient_id' => $patientId],            'order' => ['OptAppointment.create_time' => 'DESC'],            'recursive' => -1        ]);        // Manually fetch related data for each appointment        foreach ($otAppointments as &$appointment) {            // Get Surgery details            if (!empty($appointment['OptAppointment']['surgery_id'])) {                $surgery = $this->Surgery->find('first', [                    'fields' => ['id', 'name', 'description'],                    'conditions' => ['Surgery.id' => $appointment['OptAppointment']['surgery_id']],                    'recursive' => -1                ]);                $appointment['Surgery'] = !empty($surgery['Surgery']) ? $surgery['Surgery'] : [];            }            // Get Surgeon details (DoctorProfile)            if (!empty($appointment['OptAppointment']['doctor_id'])) {                $surgeon = $this->DoctorProfile->find('first', [                    'fields' => ['user_id', 'doctor_name'],                    'conditions' => ['DoctorProfile.user_id' => $appointment['OptAppointment']['doctor_id']],                    'recursive' => -1                ]);                $appointment['DoctorProfile'] = !empty($surgeon['DoctorProfile']) ? $surgeon['DoctorProfile'] : [];            }            // Get Anaesthetist details (Doctor/User)            if (!empty($appointment['OptAppointment']['department_id'])) {                $anaesthetist = $this->Doctor->find('first', [                    'fields' => ['id', 'first_name', 'last_name'],                    'conditions' => ['Doctor.id' => $appointment['OptAppointment']['department_id']],                    'recursive' => -1                ]);                $appointment['Doctor'] = !empty($anaesthetist['Doctor']) ? $anaesthetist['Doctor'] : [];            }        }        // Process Surgery Notes        foreach ($surgeryNotes as $note) {            $otNotes[] = [                'Note Type' => 'Surgery Note',                'Date' => $note['Note']['create_time'],                'Procedure' => $note['Surgery']['surgery_name'],                'Title' => $note['Note']['title'],                'Surgery Note Type' => $note['Note']['surgery_note_type'],                'Anaesthesia Note Type' => $note['Note']['anaesthesia_note_type'],                'Note Content' => $note['Note']['note'],                'Surgery Description' => $note['Note']['surgery'],                'Anaesthesia Note' => $note['Note']['anaesthesia_note'],                'Implants' => $note['Note']['implants'],                'Event Note' => $note['Note']['event_note'],                'Pre Operative' => $note['Note']['pre_opt'],                'Post Operative' => $note['Note']['post_opt'],                'Investigation' => $note['Note']['investigation'],                'Present Condition' => $note['Note']['present_condition'],                'Description' => $note['Surgery']['surgery_description']            ];        }        // Process OT Appointments (matching your image format)        foreach ($otAppointments as $appointment) {            // Get surgeon name from DoctorProfile association            $surgeonName = !empty($appointment['DoctorProfile']['doctor_name']) ?                          $appointment['DoctorProfile']['doctor_name'] : '';            // Get anaesthetist name from Doctor association (department_id)            $anaesthetistName = '';            if (!empty($appointment['Doctor']['first_name']) || !empty($appointment['Doctor']['last_name'])) {                $anaesthetistName = trim($appointment['Doctor']['first_name'] . ' ' . $appointment['Doctor']['last_name']);            } elseif (!empty($appointment['Doctor']['full_name'])) {                $anaesthetistName = $appointment['Doctor']['full_name'];            }            // Get procedure name from Surgery association            $procedureName = !empty($appointment['Surgery']['name']) ?                            $appointment['Surgery']['name'] : '';            // Use description from OptAppointment if available, otherwise from Surgery            $description = !empty($appointment['OptAppointment']['description']) ?                          $appointment['OptAppointment']['description'] :                          (!empty($appointment['Surgery']['description']) ? $appointment['Surgery']['description'] : '');            $otNotes[] = [                'Note Type' => 'OT Appointment',                'Date' => $appointment['OptAppointment']['schedule_date'] . ' ' . $appointment['OptAppointment']['start_time'],                'Procedure' => $procedureName,                'Surgeon' => $surgeonName,                'Anaesthetist' => $anaesthetistName,                'Anaesthesia' => $appointment['OptAppointment']['anaesthesia'],                'Description' => $description,                'Schedule Date' => $appointment['OptAppointment']['schedule_date'],                'Start Time' => $appointment['OptAppointment']['start_time'],                'End Time' => $appointment['OptAppointment']['end_time'],                'Diagnosis' => $appointment['OptAppointment']['diagnosis'],                'Operation Type' => $appointment['OptAppointment']['operation_type']            ];        }// ✅ Pharmacy Bills - Essential data only (matching inventory_print_view.ctp structure)        // Unbind automatic model associations to avoid conflicts        $this->PharmacySalesBill->unbindModel([            'belongsTo' => ['Doctor', 'Initial']        ]);        $pharmacyResults = $this->PharmacySalesBill->find('all', [            'fields' => [                'PharmacySalesBill.id',                'PharmacySalesBill.bill_code',                'PharmacySalesBill.create_time',                'PharmacySalesBill.total',                'PharmacySalesBill.payment_mode',                'PharmacySalesBill.customer_name',                'PharmacySalesBill.p_doctname'            ],            'conditions' => [                'PharmacySalesBill.patient_id' => $patientId,                'PharmacySalesBill.is_deleted' => 0            ],            'order' => ['PharmacySalesBill.create_time' => 'DESC'],            'recursive' => -1        ]);        $pharmacyBills = [];        foreach ($pharmacyResults as $bill) {            // Get essential bill details for each pharmacy bill (matching print view structure)            $billDetails = $this->PharmacySalesBillDetail->find('all', [                'fields' => [                    'PharmacySalesBillDetail.qty',                    'PharmacySalesBillDetail.qty_type',                    'PharmacySalesBillDetail.pack',                    'PharmacySalesBillDetail.sale_price',                    'PharmacySalesBillDetail.batch_number',                    'PharmacySalesBillDetail.expiry_date',                    'PharmacyItem.name',                    'PharmacyItem.pack as item_pack'                ],                'joins' => [                    [                        'table' => 'pharmacy_items',                        'alias' => 'PharmacyItem',                        'type' => 'LEFT',                        'conditions' => ['PharmacySalesBillDetail.item_id = PharmacyItem.id']                    ]                ],                'conditions' => [                    'PharmacySalesBillDetail.pharmacy_sales_bill_id' => $bill['PharmacySalesBill']['id']                ],                'recursive' => -1            ]);            $items = [];            foreach ($billDetails as $detail) {                // Format expiry date as shown in print view (MM/YYYY)                $expiry_date = '';                if (!empty($detail['PharmacySalesBillDetail']['expiry_date'])) {                    $newDate = explode("-", $detail['PharmacySalesBillDetail']['expiry_date']);                    $expiry_date = (count($newDate) >= 2) ? $newDate[1] . "/" . $newDate[0] : "";                }                // Calculate amount as per print view logic                $qty = $detail['PharmacySalesBillDetail']['qty'];                $price = $detail['PharmacySalesBillDetail']['sale_price'];                $amount = $price * $qty;                $items[] = [                    'Item Name' => $detail['PharmacyItem']['name'],                    'Package' => $detail['PharmacyItem']['item_pack'],                    'Batch No' => $detail['PharmacySalesBillDetail']['batch_number'],                    'Exp Date' => $expiry_date,                    'Qty' => $qty,                    'Amount' => $amount                ];            }            $pharmacyBills[] = [                'Bill No' => $bill['PharmacySalesBill']['bill_code'],                'Date' => $bill['PharmacySalesBill']['create_time'],                'Patient' => $bill['PharmacySalesBill']['customer_name'],                'Prescribed by' => $bill['PharmacySalesBill']['p_doctname'],                'Payment' => ucfirst($bill['PharmacySalesBill']['payment_mode']),                'Total' => $bill['PharmacySalesBill']['total'],                'Items' => $items            ];        }        /*        // ✅ COMMENTED OUT - Previous detailed pharmacy code        $pharmacyResults = $this->PharmacySalesBill->find('all', [            'fields' => [                'PharmacySalesBill.id',                'PharmacySalesBill.bill_code',                'PharmacySalesBill.create_time',                'PharmacySalesBill.total',                'PharmacySalesBill.discount',                'PharmacySalesBill.tax',                'PharmacySalesBill.payment_mode',                'PharmacySalesBill.customer_name',                'PharmacySalesBill.p_doctname',                'Person.first_name',                'Person.last_name',                'User.first_name as doctor_first_name',                'User.last_name as doctor_last_name'            ],            'joins' => [                [                    'table' => 'persons',                    'alias' => 'Person',                    'type' => 'LEFT',                    'conditions' => ['PharmacySalesBill.patient_id = Person.id']                ],                [                    'table' => 'users',                    'alias' => 'User',                    'type' => 'LEFT',                    'conditions' => ['PharmacySalesBill.doctor_id = User.id']                ]            ],            'conditions' => [                'PharmacySalesBill.patient_id' => $patientId,                'PharmacySalesBill.is_deleted' => 0            ],            'order' => ['PharmacySalesBill.create_time' => 'DESC'],            'recursive' => -1        ]);        */        // ✅ Final Response        // ✅ Final Response        $patientData = [            'Patient Name' => $patientResult['Person']['first_name'] . ' ' . $patientResult['Person']['last_name'],            'Patient UUID' => $patientResult['Person']['patient_uid'],            'Admission Date' => $patientResult['Patient']['form_received_on'],            'Next of Kin Name' => $patientResult['Person']['next_of_kin_name'],            'Next of Kin Mobile' => $patientResult['Person']['next_of_kin_mobile'],            'Allergy' => $patientResult['Person']['allergies'],            'Patient Tariff' => $patientResult['TariffStandard']['tariff_name'],            'Blood Group' => $patientResult['Person']['blood_group'],            'Patient Status' => $patientResult['Patient']['status'],            'Doctor' => $patientResult['User']['doctor_first_name'] . ' ' . $patientResult['User']['doctor_last_name'],            'Admission Type' => $patientResult['Person']['admission_type'],            'Age/Sex' => $patientResult['Person']['age'] . ' ' . $patientResult['Person']['sex'],            'Diagnosis' => $patientResult['DischargeSummary']['final_diagnosis'],            'Mobile No' => $patientResult['Person']['mobile'],            'Address' => $patientResult['Person']['state'] . ', ' . $patientResult['Person']['city'] . ', ' . $patientResult['Person']['plot_no'] . ', ' . $patientResult['Person']['pin_code'],            'Agent Id' => $patientResult['Person']['agent_id'],            'Driver' => $patientResult['Person']['relationship_manager'],            'Date' => $patientResult['Patient']['create_time'],            'Hospital' => 'Hope Hospital',            'Lab Tests' => $labTests,            'Radiology Tests' => $radiologyTests,            'Pharmacy Bills' => $pharmacyBills,              'HL7 Lab Results' => $hl7Formatted ,              'OT Notes' => $otNotes        ];        echo json_encode(['status' => 'success', 'data' => ['Personal Details' => $patientData]]);    } catch (Exception $e) {        echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);    }}// public function patient_details_esic_only() {//     $this->autoRender = false;//     $this->response->type('json');//     App::import('Vendor', 'DrmhopeDB');//     $dbInstance = new DrmhopeDB('db_HopeHospital');//     $models = [//         'Patient', 'Person', 'User', 'TariffStandard', 'DischargeSummary',//         'LaboratoryTestOrder', 'LaboratoryResult', 'Laboratory', 'RadiologyTestOrder','PharmacySalesBill', 'PharmacySalesBillDetail', 'PharmacyItem'//     ];//     foreach ($models as $model) {//         $this->loadModel($model);//         $dbInstance->makeConnection($this->{$model});//     }//     $mobile = $this->request->data('mobile');//     if (empty($mobile)) {//         echo json_encode(['status' => 'error', 'message' => 'Mobile number required.']);//         return;//     }//     $mobile = substr($mobile, -10);//     try {//         $patientResult = $this->Patient->find('first', [//             'fields' => [//                 'Patient.id',//                 'Patient.form_received_on',//                 'Patient.status',//                 'Patient.create_time',//                 'Person.admission_type',//                 'Person.first_name',//                 'Person.last_name',//                 'Person.mobile',//                 'Person.age',//                 'Person.sex',//                 'Person.blood_group',//                 'Person.allergies',//                 'Person.next_of_kin_name',//                 'Person.next_of_kin_mobile',//                 'Person.relationship_manager',//                 'Person.patient_uid',//                 'User.first_name as doctor_first_name',//                 'User.last_name as doctor_last_name',//                 'TariffStandard.name as tariff_name',//                 'DischargeSummary.final_diagnosis',//                 'Person.state', 'Person.city', 'Person.plot_no', 'Person.pin_code',//                 'Person.agent_id'//             ],//             'joins' => [//                 [//                     'table' => 'persons',//                     'alias' => 'Person',//                     'type' => 'INNER',//                     'conditions' => ['Patient.person_id = Person.id']//                 ],//                 [//                     'table' => 'users',//                     'alias' => 'User',//                     'type' => 'LEFT',//                     'conditions' => ['Patient.doctor_id = User.id']//                 ],//                 [//                     'table' => 'tariff_standards',//                     'alias' => 'TariffStandard',//                     'type' => 'INNER',//                     'conditions' => ['Patient.tariff_standard_id = TariffStandard.id']//                 ],//                 [//                     'table' => 'discharge_summaries',//                     'alias' => 'DischargeSummary',//                     'type' => 'LEFT',//                     'conditions' => ['DischargeSummary.patient_id = Patient.id']//                 ]//             ],//             'conditions' => [//                 'Person.mobile' => $mobile,//                 'TariffStandard.name' => 'ESIC'//             ],//             'order' => ['Patient.create_time' => 'DESC']//         ]);//         if (empty($patientResult)) {//             echo json_encode(['status' => 'error', 'message' => 'No ESIC patients found with this mobile number.']);//             return;//         }//         $patientId = $patientResult['Patient']['id'];//         // ✅ Lab Tests//         $labResults = $this->LaboratoryTestOrder->find('all', [//             'fields' => [//                 'LaboratoryTestOrder.id',//                 'LaboratoryTestOrder.amount',//                 'Laboratory.id',//                 'Laboratory.name'//             ],//             'joins' => [//                 [//                     'table' => 'laboratories',//                     'alias' => 'Laboratory',//                     'type' => 'LEFT',//                     'conditions' => ['Laboratory.id = LaboratoryTestOrder.laboratory_id'] // Adjust this based on actual schema//                 ]//             ],//             'conditions' => [//                 'LaboratoryTestOrder.patient_id' => $patientId//             ]//         ]);//         $labTests = [];//         foreach ($labResults as $lab) {//             $labTests[] = [//                 'Lab Test Order ID' => $lab['LaboratoryTestOrder']['id'],//                 'Lab Amount' => $lab['LaboratoryTestOrder']['amount'],//                 'Laboratory ID' => $lab['Laboratory']['id'],//                 'Laboratory Name' => $lab['Laboratory']['name']//             ];//         }//         // ✅ Radiology Tests//         $radiologyResults = $this->RadiologyTestOrder->find('all', [//             'fields' => [//                 'RadiologyTestOrder.testname',//                 'RadiologyTestOrder.amount'//             ],//             'conditions' => [//                 'RadiologyTestOrder.patient_id' => $patientId//             ]//         ]);//         $radiologyTests = [];//         foreach ($radiologyResults as $rad) {//             $radiologyTests[] = [//                 'Test Name' => $rad['RadiologyTestOrder']['testname'],//                 'Amount' => $rad['RadiologyTestOrder']['amount']//             ];//         }        //         // ✅ Pharmacy Bills - Essential data only (matching inventory_print_view.ctp structure)//             // Unbind automatic model associations to avoid conflicts//             $this->PharmacySalesBill->unbindModel([//                 'belongsTo' => ['Doctor', 'Initial']//             ]);        //             $pharmacyResults = $this->PharmacySalesBill->find('all', [//                 'fields' => [//                     'PharmacySalesBill.id',//                     'PharmacySalesBill.bill_code',//                     'PharmacySalesBill.create_time',//                     'PharmacySalesBill.total',//                     'PharmacySalesBill.payment_mode',//                     'PharmacySalesBill.customer_name',//                     'PharmacySalesBill.p_doctname'//                 ],//                 'conditions' => [//                     'PharmacySalesBill.patient_id' => $patientId,//                     'PharmacySalesBill.is_deleted' => 0//                 ],//                 'order' => ['PharmacySalesBill.create_time' => 'DESC'],//                 'recursive' => -1//             ]);        //             $pharmacyBills = [];//             foreach ($pharmacyResults as $bill) {//                 // Get essential bill details for each pharmacy bill (matching print view structure)//                 $billDetails = $this->PharmacySalesBillDetail->find('all', [//                     'fields' => [//                         'PharmacySalesBillDetail.qty',//                         'PharmacySalesBillDetail.qty_type',//                         'PharmacySalesBillDetail.pack',//                         'PharmacySalesBillDetail.sale_price',//                         'PharmacySalesBillDetail.batch_number',//                         'PharmacySalesBillDetail.expiry_date',//                         'PharmacyItem.name',//                         'PharmacyItem.pack as item_pack'//                     ],//                     'joins' => [//                         [//                             'table' => 'pharmacy_items',//                             'alias' => 'PharmacyItem',//                             'type' => 'LEFT',//                             'conditions' => ['PharmacySalesBillDetail.item_id = PharmacyItem.id']//                         ]//                     ],//                     'conditions' => [//                         'PharmacySalesBillDetail.pharmacy_sales_bill_id' => $bill['PharmacySalesBill']['id']//                     ],//                     'recursive' => -1//                 ]);        //                 $items = [];//                 foreach ($billDetails as $detail) {//                     // Format expiry date as shown in print view (MM/YYYY)//                     $expiry_date = '';//                     if (!empty($detail['PharmacySalesBillDetail']['expiry_date'])) {//                         $newDate = explode("-", $detail['PharmacySalesBillDetail']['expiry_date']);//                         $expiry_date = (count($newDate) >= 2) ? $newDate[1] . "/" . $newDate[0] : "";//                     }        //                     // Calculate amount as per print view logic//                     $qty = $detail['PharmacySalesBillDetail']['qty'];//                     $price = $detail['PharmacySalesBillDetail']['sale_price'];//                     $amount = $price * $qty;        //                     $items[] = [//                         'Item Name' => $detail['PharmacyItem']['name'],//                         'Package' => $detail['PharmacyItem']['item_pack'],//                         'Batch No' => $detail['PharmacySalesBillDetail']['batch_number'],//                         'Exp Date' => $expiry_date,//                         'Qty' => $qty,//                         'Amount' => $amount//                     ];//                 }        //                 $pharmacyBills[] = [//                     'Bill No' => $bill['PharmacySalesBill']['bill_code'],//                     'Date' => $bill['PharmacySalesBill']['create_time'],//                     'Patient' => $bill['PharmacySalesBill']['customer_name'],//                     'Prescribed by' => $bill['PharmacySalesBill']['p_doctname'],//                     'Payment' => ucfirst($bill['PharmacySalesBill']['payment_mode']),//                     'Total' => $bill['PharmacySalesBill']['total'],//                     'Items' => $items//                 ];//             }        //             /*//             // ✅ COMMENTED OUT - Previous detailed pharmacy code//             $pharmacyResults = $this->PharmacySalesBill->find('all', [//                 'fields' => [//                     'PharmacySalesBill.id',//                     'PharmacySalesBill.bill_code',//                     'PharmacySalesBill.create_time',//                     'PharmacySalesBill.total',//                     'PharmacySalesBill.discount',//                     'PharmacySalesBill.tax',//                     'PharmacySalesBill.payment_mode',//                     'PharmacySalesBill.customer_name',//                     'PharmacySalesBill.p_doctname',//                     'Person.first_name',//                     'Person.last_name',//                     'User.first_name as doctor_first_name',//                     'User.last_name as doctor_last_name'//                 ],//                 'joins' => [//                     [//                         'table' => 'persons',//                         'alias' => 'Person',//                         'type' => 'LEFT',//                         'conditions' => ['PharmacySalesBill.patient_id = Person.id']//                     ],//                     [//                         'table' => 'users',//                         'alias' => 'User',//                         'type' => 'LEFT',//                         'conditions' => ['PharmacySalesBill.doctor_id = User.id']//                     ]//                 ],//                 'conditions' => [//                     'PharmacySalesBill.patient_id' => $patientId,//                     'PharmacySalesBill.is_deleted' => 0//                 ],//                 'order' => ['PharmacySalesBill.create_time' => 'DESC'],//                 'recursive' => -1//             ]);//             */        //             // ✅ Final Response            //     'Pharmacy Bills' => $pharmacyBills//         // ✅ Final Response//         $patientData = [//             'Patient Name' => $patientResult['Person']['first_name'] . ' ' . $patientResult['Person']['last_name'],//             'Patient UUID' => $patientResult['Person']['patient_uid'],//             'Admission Date' => $patientResult['Patient']['form_received_on'],//             'Next of Kin Name' => $patientResult['Person']['next_of_kin_name'],//             'Next of Kin Mobile' => $patientResult['Person']['next_of_kin_mobile'],//             'Allergy' => $patientResult['Person']['allergies'],//             'Patient Tariff' => $patientResult['TariffStandard']['tariff_name'],//             'Blood Group' => $patientResult['Person']['blood_group'],//             'Patient Status' => $patientResult['Patient']['status'],//             'Doctor' => $patientResult['User']['doctor_first_name'] . ' ' . $patientResult['User']['doctor_last_name'],//             'Admission Type' => $patientResult['Person']['admission_type'],//             'Age/Sex' => $patientResult['Person']['age'] . ' ' . $patientResult['Person']['sex'],//             'Diagnosis' => $patientResult['DischargeSummary']['final_diagnosis'],//             'Mobile No' => $patientResult['Person']['mobile'],//             'Address' => $patientResult['Person']['state'] . ', ' . $patientResult['Person']['city'] . ', ' . $patientResult['Person']['plot_no'] . ', ' . $patientResult['Person']['pin_code'],//             'Agent Id' => $patientResult['Person']['agent_id'],//             'Driver' => $patientResult['Person']['relationship_manager'],//             'Date' => $patientResult['Patient']['create_time'],//             'Hospital' => 'Hope Hospital',//             'Lab Tests' => $labTests,//             'Radiology Tests' => $radiologyTests//         ];//         echo json_encode(['status' => 'success', 'data' => ['Personal Details' => $patientData]]);//     } catch (Exception $e) {//         echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);//     }// }// updated codepublic function patient_details_ride() {    $this->autoRender = false; // Disable view rendering    $this->response->type('json'); // Set response type to JSON    App::import('Vendor', 'DrmhopeDB');        // Create connections to all three databases    $hopeDB = new DrmhopeDB('db_HopeHospital');    $ayushmanDB = new DrmhopeDB('db_Ayushman');    $dbhopeDB = new DrmhopeDB('db_hope');        // Models to be loaded    $models = ['Patient', 'Person', 'User', 'TariffStandard', 'DischargeSummary'];        // Load models    foreach ($models as $model) {        $this->loadModel($model);    }    // Define the date condition (after 15th March 2025)    $startDate = '2025-03-15';    try {        $databases = [            'Hope Hospital' => $hopeDB,             'Ayushman Hospital' => $ayushmanDB,             // 'Hope Group' => $dbhopeDB        ];        $patientData = [];        // Loop through each database and fetch data        foreach ($databases as $dbName => $dbInstance) {            // Make the connection to the current database            $dbInstance->makeConnection($this->Patient);            $dbInstance->makeConnection($this->Person);            $dbInstance->makeConnection($this->User);            $dbInstance->makeConnection($this->TariffStandard);            $dbInstance->makeConnection($this->DischargeSummary);            // Fetch patient details where admission date is after 15/03/2025            $results = $this->Patient->find('all', [                'fields' => [                    'Patient.id',                    'Patient.form_received_on',                    'Patient.status',                    'Patient.market_team',                    'Patient.create_time',                    'Person.admission_type',                    'Person.first_name',                    'Person.last_name',                    'Person.mobile',                    'Person.age',                    'Person.sex',                    'Person.blood_group',                    'Person.allergies',                    'Person.next_of_kin_name',                    'Person.next_of_kin_mobile',                    'Person.relationship_manager',                    'Person.patient_uid',                    'User.first_name as doctor_first_name',                    'User.last_name as doctor_last_name',                    'TariffStandard.name as tariff_name',                    'DischargeSummary.final_diagnosis',                    'Person.state', 'Person.city', 'Person.plot_no', 'Person.pin_code',                    'Person.agent_id'                ],                'joins' => [                    [                        'table' => 'persons',                        'alias' => 'Person',                        'type' => 'INNER',                        'conditions' => ['Patient.person_id = Person.id']                    ],                    [                        'table' => 'users',                        'alias' => 'User',                        'type' => 'LEFT',                        'conditions' => ['Patient.doctor_id = User.id']                    ],                    [                        'table' => 'tariff_standards',                        'alias' => 'TariffStandard',                        'type' => 'LEFT',                        'conditions' => ['Patient.tariff_standard_id = TariffStandard.id']                    ],                    [                        'table' => 'discharge_summaries',                        'alias' => 'DischargeSummary',                        'type' => 'LEFT',                        'conditions' => ['DischargeSummary.patient_id = Patient.id']                    ]                ],                'conditions' => ['Patient.form_received_on >' => $startDate],     'order' => ['Patient.create_time' => 'DESC']  // Sort by form_received_on in descending order            ]);            if (!empty($results)) {                foreach ($results as $result) {                    $patientData[] = [                        'Patient Name' => $result['Person']['first_name'] . ' ' . $result['Person']['last_name'],                        'Patient UUID' => $result['Person']['patient_uid'],                        'Admission Date' => $result['Patient']['form_received_on'],                        'Next of Kin Name' => $result['Person']['next_of_kin_name'],                        'Next of Kin Mobile' => $result['Person']['next_of_kin_mobile'],                        'Allergy' => $result['Person']['allergies'],                        'Patient Tariff' => $result['TariffStandard']['tariff_name'],                        'Blood Group' => $result['Person']['blood_group'],                        'Patient Status' => $result['Patient']['status'],                        'Doctor' => $result['User']['doctor_first_name'] . ' ' . $result['User']['doctor_last_name'],                        'Admission Type' => $result['Person']['admission_type'],                        'Age/Sex' => $result['Person']['age'] . ' ' . $result['Person']['sex'],                        'Diagnosis' => $result['DischargeSummary']['final_diagnosis'],                        'Mobile No' => $result['Person']['mobile'],                        'Address' => $result['Person']['state'] . ', ' . $result['Person']['city'] . ', ' . $result['Person']['plot_no'] . ', ' . $result['Person']['pin_code'],                        'Agent Id' => $result['Person']['agent_id'],                        'Driver' => $result['Person']['relationship_manager'],                        'Date' => $result['Patient']['create_time'],                        'Hospital' => $dbName // ✅ Added database name field                    ];                }            }        }        // ✅ Step 1: Sort the data **AFTER** merging from all databases        usort($patientData, function ($a, $b) {            return strtotime($a['Admission Date']) - strtotime($b['Admission Date']);        });        if (empty($patientData)) {            echo json_encode(['status' => 'error', 'message' => 'No patients found after 15th March 2025.']);        } else {            echo json_encode(['status' => 'success', 'data' => $patientData]);        }    } catch (Exception $e) {        echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);    }}private function formatPatientData($patientInfo) {    return [        'Patient Name' => $patientInfo['Person']['first_name'] . ' ' . $patientInfo['Person']['last_name'],        'Patient UUID' => $patientInfo['Person']['patient_uid'],        'Admission Date' => $patientInfo['Patient']['form_received_on'],        'Next of Kin Name' => $patientInfo['Person']['next_of_kin_name'],        'Next of Kin Mobile' => $patientInfo['Person']['next_of_kin_mobile'],        'Allergy' => $patientInfo['Person']['allergies'],        'Patient Tariff' => $patientInfo['TariffStandard']['tariff_name'],        'Blood Group' => $patientInfo['Person']['blood_group'],        'Patient Status' => $patientInfo['Patient']['status'],        'Doctor' => $patientInfo['User']['doctor_first_name'] . ' ' . $patientInfo['User']['doctor_last_name'],        'Admission Type' => $patientInfo['Person']['admission_type'],        'Age/Sex' => $patientInfo['Person']['age'] . ' ' . $patientInfo['Person']['sex'],        'Diagnosis' => $patientInfo['DischargeSummary']['final_diagnosis'],        'Mobile No' => $patientInfo['Person']['mobile'],        'Address' => $patientInfo['Person']['state'] . ', ' . $patientInfo['Person']['city'] . ', ' . $patientInfo['Person']['plot_no'] . ', ' . $patientInfo['Person']['pin_code'],        'Agent Id' => $patientInfo['Person']['agent_id']    ];}public $components = array('RequestHandler'); // Handles JSON and XML responsesprivate function loadDatabaseConnection($dbName) {    App::import('Vendor', 'DrmhopeDB');    $dbConnection = new DrmhopeDB($dbName);    try {        $dbConnection->makeConnection($this->{$model});        debug("Connected to database: $dbName");    } catch (Exception $e) {        debug("Connection failed for database: $dbName - " . $e->getMessage());    }}}